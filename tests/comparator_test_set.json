[
    {
        "predicate1": "collateralValue >= debt * 1.5",
        "predicate2": "collateralValue >= debt * 1.6",
        "verdict": "The second predicate is stronger."
    },
    {
        "predicate1": "collateralValue >= debt * 1.5",
        "predicate2": "collateralValue >= debt / 1.6",
        "verdict": "The first predicate is stronger."
    },
    {
        "predicate1": "collateralValue >= debt * 2",
        "predicate2": "collateralValue >= debt * 1",
        "verdict": "The first predicate is stronger."
    },
    {
        "predicate1": "a > b",
        "predicate2": "a >= b",
        "verdict": "The first predicate is stronger."
    },
    {
        "predicate1": "a >= b",
        "predicate2": "a > b",
        "verdict": "The second predicate is stronger."
    },
    {
        "predicate1": "collateralValue >= debt * 1.5",
        "predicate2": "collateralValue >= debt * 1.5",
        "verdict": "The predicates are equivalent."
    },
    {
        "predicate1": "(a + b) > c",
        "predicate2": "(a + b) >= c",
        "verdict": "The first predicate is stronger."
    },
    {
        "predicate1": "(a + b) >= c",
        "predicate2": "(a + b) > c",
        "verdict": "The second predicate is stronger."
    },
    {
        "predicate1": "(a + b) == c",
        "predicate2": "(a + b) > c",
        "verdict": "The predicates are not equivalent and neither is stronger."
    },
    {
        "predicate1": "(a + b) <= c",
        "predicate2": "(a + b) > c",
        "verdict": "The predicates are not equivalent and neither is stronger."
    },
    {
        "predicate1": "msg.value==_MINT_FEE ",
        "predicate2": "msg.value>=_MINT_FEE",
        "verdict": "The first predicate is stronger."
    },
    {
        "predicate1": "coinMap[_coin].coinContract.balanceOf(msg.sender)>=_amount",
        "predicate2": "coinMap[_coin].coinContract.balanceOf(msg.sender)>=_amount*1e18",
        "verdict": "The second predicate is stronger."
    },
    {
        "predicate1": "a > b * 2",
        "predicate2": "a > b * 1",
        "verdict": "The first predicate is stronger."
    },
    {
        "predicate1": "a > b / 2",
        "predicate2": "a > b / 1",
        "verdict": "The second predicate is stronger."
    },
    {
        "predicate1": "(a+1) > b / 2",
        "predicate2": "(a+1) > b / 1",
        "verdict": "The second predicate is stronger."
    },
    {
        "predicate1": "(a+4) > b / 2",
        "predicate2": "(a+1) > b / 1",
        "verdict": "The second predicate is stronger."
    },
    {
        "predicate1": "x > 0",
        "predicate2": "x == 1",
        "verdict": "The second predicate is stronger."
    },
    {
        "predicate1": "a + 1 <= b",
        "predicate2": "a + 1 < b",
        "verdict": "The second predicate is stronger."
    },
    {
        "predicate1": "stakingTokenBalances > stakingTokenBalances",
        "predicate2": "stakingTokenBalances != stakingTokenBalances",
        "verdict": "The second predicate is stronger."
    },
    {
        "predicate1": "x > y",
        "predicate2": "x != y",
        "verdict": "The second predicate is stronger."
    },
    {
        "predicate1": "x <= y",
        "predicate2": "x == y",
        "verdict": "The second predicate is stronger."
    },
    {
        "predicate1": "x >= y",
        "predicate2": "x == y",
        "verdict": "The second predicate is stronger."
    },
    {
        "predicate1": "x - 1 < y",
        "predicate2": "x - 1 <= y",
        "verdict": "The first predicate is stronger."
    },
    {
        "predicate1": "x + 1 < y",
        "predicate2": "x + 1 <= y",
        "verdict": "The first predicate is stronger."
    },
    {
        "predicate1": "!used[salt]",
        "predicate2": "used[salt]==false",
        "verdict":"The predicates are equivalent."
    },
    {
        "predicate1": "ethBalances[_msgSender()]<=9e18",
        "predicate2": "ethBalances[_msgSender()]<=9e19",
        "verdict": "The first predicate is stronger."
    }, 
    {
        "predicate1": "balanceOf(to)<=holdLimitAmount-amount",
        "predicate2": "balanceOf(to)+amount<=holdLimitAmount",
        "verdict": "The predicates are equivalent."
    },
    {
        "predicate1": "_getIdentifierWhitelist().isIdentifierSupported(_priceIdentifier)",
        "predicate2": "_getIdentifierWhitelist().isIdentifierSupported(smt)",
        "verdict": "The predicates are not equivalent and neither is stronger."
    },
    {
        "predicate1": "(_tTotalpercentBuy)/divisorBuy>=(_tTotal/5000)",
        "predicate2": "(percentBuy_decimals)/divisorBuy>=(_tTotal/10000)",
        "verdict": "The predicates are not equivalent and neither is stronger."
    },
    {
        "predicate1": "currentSupply+1<=MAX_SUPPLY",
        "predicate2": "currentSupply+boyzToUse.length<=MAX_SUPPLY",
        "verdict": "The predicates are not equivalent and neither is stronger"
    },
    {
        "predicate1": "super.balanceOf(to)+amount<=holdLimitAmount",
        "predicate2": "balanceOf(to)+amount<=holdLimitAmount",
        "verdict": "The predicates are not equivalent and neither is stronger"
    }, 
    {
        "predicate1": "(value<=60days) || (false)",
        "predicate2": "(value<=60days) || (false)",
        "verdict": "The predicates are equivalent."
    }
]